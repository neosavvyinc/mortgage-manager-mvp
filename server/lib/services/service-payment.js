'use strict';

var async = require('async'),
	commonUtils = require('../utils/common-utils'),
	paymentModel = require('../db/models/model-payment').Model,
	cardModel = require('../db/models/model-card').Model,
	userModel = require('../db/models/model-user').Model,
	userDetailsModel = require('../db/models/model-user-details').Model,
	settings = require('../config/app/settings'),
	stripe = require('stripe');

/**
 * Makes a payment to stripe using the stripe Node API
 * @param uid
 * @param token
 * @param card
 * @param amount
 * @param idempotentToken - generated by client. Ensures that same payment is not made twice.
 * @param success
 * @param failure
 */
exports.makePayment = function(uid, token, card, amount, idempotentToken, success, failure) {
	var charge,
		chargeError,
		userToUpdate,
		payingUser,
		payment = new paymentModel(),
		cardInstance = new cardModel(),
		user = new userModel(),
		userDetails = new userDetailsModel(),
		cardId = commonUtils.generateId(),
		paymentId = commonUtils.generateId(),
		currentDate = new Date();

	async.series([
		function(done) {
			user.retrieve({_id: uid}, function(docs) {
				payingUser = docs[0].toObject();
				if(docs[0].toObject().pricingPlan === 'premium') {
					done(new Error('Already made payment'));
				} else {
					done();
				}
			}, done);
		},
		function(done) {
			//Check if card already exists and store the card token
			cardInstance.retrieve({token: token}, function(docs) {
				if(docs.length > 0) {
					done();
				} else {
					//Save card details to card Object
					cardInstance.insert({_id: cardId, token: token, uid: uid, card: card}, function() {
						done();
					}, done);
				}
			}, done);
		},
		function(done) {
			/*jshint camelcase: false */
			var stripeInstance = stripe(settings.getConfig().stripe.secretKey);

			stripeInstance.charges.create({
				amount: amount * 100,
				currency: 'usd',
				source: token,
				description: 'Charging $'+ amount + ' for the mortgage app',
				receipt_email: payingUser.email
			}, {
				idempotency_key: idempotentToken
			}, function(err, _charge) {
				if(err) {
					chargeError = err;
					done();
				} else {
					charge = _charge;
					done();
				}
			});
		},
		function(done) {
			//Save payment details even if there is a charge error and then send charge error back to route.
			//We may need the details of declined transactions by Stripe in our database.
			var paymentDetails = {
					_id: paymentId,
					cardId: cardId,
					amount: amount,
					paymentDate: currentDate,
					status: 'accepted'
				};

			if(chargeError) {
				paymentDetails.status = 'declined';
				paymentDetails.declineReason = chargeError.type + ' ' + chargeError.code;
			}

			payment.insert(paymentDetails, function() {
				if(chargeError) {
					done(_getChargeErrorMessage(chargeError));
				} else {
					done();
				}
			}, done);
		},
		function(done) {
			//Change plan for user to premium
			user.update({pricingPlan: 'premium'}, { _id: uid }, null, done, done);
		},
		function(done) {
			//Get the coapplicant userId
			userDetails.retrieve({_id: uid}, function(docs) {
				userToUpdate = docs[0].toObject().coUID;
				done();
			}, done);
		},
		function(done) {
			//If the coapplicant is paying, primary applicant should also have premium
			userDetails.retrieve({coUID: uid}, function(docs) {
				userToUpdate = docs[0].toObject()._id;
				done();
			}, done);
		},
		function(done) {
			if(userToUpdate === undefined) {
				done();
			} else {
				//Change plan for coapplicant to premium
				user.update({pricingPlan: 'premium'}, {_id: userToUpdate}, null, done, done);
			}
		}
	], function(error) {
		if(error) {
			failure(error);
		} else {
			success();
		}
	});

};

/**
 * Helper to return a useful message when a payment is declined.
 * @param chargeError
 * @returns {Object}
 * @private
 */
var _getChargeErrorMessage = function(chargeError) {
	var message;

	if(chargeError.type === 'api_error') {
		message = 'There was a problem with our payment vendor.';
	} else if(chargeError.type === 'card_error') {
		switch(chargeError.code) {
			case 'incorrect_number':
				message = 'The card number is incorrect';
				break;

			case 'invalid number':
				message = 'The card number is not a valid credit card number';
				break;

			case 'invalid_expiry_month':
				message = 'The card\'s expiration month is invalid';
				break;

			case 'invalid_expiry_year':
				message = 'The card\'s expiration year is invalid';
				break;

			case 'invalid_cvc':
				message = 'The card\'s security code is invalid';
				break;

			case 'expired_card':
				message = 'The card has expired';
				break;

			case 'incorrect_cvc':
				message = 'The card\'s security code is incorrect';
				break;

			case 'incorrect_zip':
				message = 'The card\'s zip code failed validation';
				break;

			case 'card_declined':
				message = 'The card was declined';
				break;

			case 'processing_error':
				message = 'An error occurred while processing the card';
				break;

			//Logging these two errors as they are not useful to the user.
			//TODO: Possibly alert us via email when these errors occur so we can tackle them immediately
			case 'rate_limit':
				settings.log.fatal('Rate limit error. Should contact Stripe');
				message = 'An error occurred while processing the card';
				break;

			// Yet to fully understand when this error may occur. I'm assuming for now that it could arise from
			// erroneous code.
			case 'missing':
				settings.log.fatal('Card missing on the customer');
				message = 'An error occurred while processing the card';
				break;
		}
	} else {
		message = chargeError.message;
	}

	return {
		message: message,
		code: chargeError.type
	};
};